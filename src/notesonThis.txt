this.title is global variable, and title is a local variable  
This is similar to this.title=flimtitle, but using this. prefix is not compulsary 
This is similar to this.director=flimdirector, but using this. prefix is not compulsary
as there are no local variables by name title, or director so, here they will implicitly referred to global variable
note: if title and director are not global declare then it will be undeclared variable cannot to be resolved to a variable
if the parameter names are similar to the global variables
then there is an ambiguity between the local variable (parameters) and global variable
hence this. prefix is used for referring the global variable
title=title will be referring the local variable on both side of the = operator (x=x) self assigning
LifeCycle Method:
	1. init-method is post object creation
	2. destroy method is pre object destruction
init-method:
This method executed immediately after the constructor
This method can be used to setup the object before it is ready for service calls
Destroy_method:
This is only working with singleton.
this is executed before garbage collector call
when an object start init-method runs then it will run destroy-method when set to null.

Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, 
configures, decorates and otherwise assembles a prototype object, 
hands it to the client and then has no further knowledge of that prototype instance.
For releasing resources try to implement a custom bean post processor.


The Spring framework enables automatic dependency injection. 
In other words, by declaring all the bean dependencies in a Spring configuration file, Spring container can autowire relationships between collaborating beans. 
This is called Spring bean autowiring.


Autowiring has the following advantages:
• Autowiring can significantly reduce the need to specify properties or constructor arguments. (Other mechanisms such as a bean template discussed elsewhere in this chapter are also valuable in this regard.)
• Autowiring can update a configuration as your objects evolve. For example, if you need to add a dependency to a class, that dependency can be satisfied automatically without you needing to modify the configuration.

Thus autowiring can be especially useful during development, without negating the option of switching to explicit wiring when the code base becomes more stable
You can combine autowire behavior with dependency checking, which is performed after autowiring completes.

